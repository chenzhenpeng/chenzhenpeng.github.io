<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Adobe六月更新一览，新增许多实用功能]]></title>
      <url>https://chenzhenpeng.github.io/2016/07/10/Adobe%E5%85%AD%E6%9C%88%E6%9B%B4%E6%96%B0%E4%B8%80%E8%A7%88%EF%BC%8C%E6%96%B0%E5%A2%9E%E8%AE%B8%E5%A4%9A%E5%AE%9E%E7%94%A8%E5%8A%9F%E8%83%BD/</url>
      <content type="html"><![CDATA[<p>　　Adobe 在6月下旬推出了近期的 6 月份更新（其实版号依然为 2015.X），为 Photoshop CC、Premiere CC、After Effects CC 还有 Stock 与云端的数据库都更新加入了些实用的功能。<a id="more"></a></p>
<h3 id="安装Adobe-Creative-Cloud"><a href="#安装Adobe-Creative-Cloud" class="headerlink" title="安装Adobe Creative Cloud"></a>安装Adobe Creative Cloud</h3><ol>
<li>首先可以根据我们个人需求修改Adobe软件的安装位置，默认是C:\Program Files\Adobe这个目录，我们可以在这个页面进行修改<br><img src="http://i.imgur.com/FRX0CzU.jpg" alt=""></li>
<li>在Apps的页面我们选择”试用”就可以安装对应的软件了(PS:当然Adobe由于国内发展形势和盗版猖獗已经退出了大陆市场，用以前的方法截取离线安装包已经不怎么好使了)<br><img src="http://i.imgur.com/K2rF5i2.jpg" alt=""></li>
</ol>
<h3 id="Adobe-Photoshop-CC最新实用功能一览"><a href="#Adobe-Photoshop-CC最新实用功能一览" class="headerlink" title="Adobe Photoshop CC最新实用功能一览"></a>Adobe Photoshop CC最新实用功能一览</h3><h5 id="华丽丽的启动页"><a href="#华丽丽的启动页" class="headerlink" title="华丽丽的启动页"></a>华丽丽的启动页</h5><p><img src="http://i.imgur.com/gfYyLGi.png" alt=""></p>
<ol>
<li>脸部液化<br>　　首先导入一张人物头像的照片(PS:这位美女说了反正你也不认识),选择”液化”选项<br><img src="http://i.imgur.com/MPbCrqE.jpg" alt=""><br>　　进入液化的工作页面我们可以看到和之前的版本的工作页面已经有了很大的改观，最明显的是它对人脸进行了识别，可以对细节进行调整。这里就不做一一演示，有兴趣可以自己找一张人物头像试一下，它支持多个人物头像的识别，比如合影。<br><img src="http://i.imgur.com/b3qwgwY.jpg" alt="">
　　</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MPAndroidChart笔记]]></title>
      <url>https://chenzhenpeng.github.io/2016/07/07/MPAndroidChart%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="因为项目接触到MPAndroidChart"><a href="#因为项目接触到MPAndroidChart" class="headerlink" title="因为项目接触到MPAndroidChart"></a>因为项目接触到MPAndroidChart</h2><p>　　因为最近的项目需求需要用到折线图，通过Google检索，发现了MPAndroidChart这款开源的表格框架，在这款框架使用过程中遇到了许多问题，多亏了一些热心的网友的帮助，在此表示感谢。现在也抽空记录一下自己的一点点关于MPAndroidChart的认识，新手乍到，多多指教！<a id="more"></a></p>
<h2 id="MPAndroid简介"><a href="#MPAndroid简介" class="headerlink" title="MPAndroid简介"></a>MPAndroid简介</h2><p>　　GitHub主页地址:<a href="https://github.com/PhilJay/MPAndroidChart" target="_blank" rel="external">https://github.com/PhilJay/MPAndroidChart</a></p>
<h3 id="能够实现的表格类型主要包含以下几种："><a href="#能够实现的表格类型主要包含以下几种：" class="headerlink" title="能够实现的表格类型主要包含以下几种："></a>能够实现的表格类型主要包含以下几种：</h3><ol>
<li>LineChart (with legend, simple design)<br><img src="https://camo.githubusercontent.com/a9eaa5fc7fb6c1e70b22acd09385055e0f5c4fe7/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d5043686172742f6d61737465722f73637265656e73686f74732f73696d706c6564657369676e5f6c696e656368617274342e706e67" alt=""></li>
<li>LineChart (with legend, simple design)<br><img src="https://camo.githubusercontent.com/8c1c9cf68af994a1e17690834603c450638cc62c/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d5043686172742f6d61737465722f73637265656e73686f74732f73696d706c6564657369676e5f6c696e656368617274332e706e67" alt=""></li>
<li>LineChart (cubic lines)<br><img src="https://camo.githubusercontent.com/4e85ee91169c2ad5dc500b3b415a0c974766615d/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d5043686172742f6d61737465722f73637265656e73686f74732f63756269636c696e6563686172742e706e67" alt=""></li>
<li>LineChart (gradient fill)<br><img src="https://camo.githubusercontent.com/e9f3408cc22c2896a897e9ed92a2fd2cbcf40493/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d50416e64726f696443686172742f6d61737465722f73637265656e73686f74732f6c696e655f63686172745f6772616469656e742e706e67" alt=""></li>
<li>Combined-Chart (bar- and linechart in this case)<br><img src="https://camo.githubusercontent.com/e29d8d3316203700965cc6cc56e67b779f2845bb/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d5043686172742f6d61737465722f73637265656e73686f74732f636f6d62696e65645f63686172742e706e67" alt=""></li>
<li>BarChart (with legend, simple design)<br><img src="https://camo.githubusercontent.com/78b4bc4e50e151970961daf56e81c4c0db72d27c/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d5043686172742f6d61737465722f73637265656e73686f74732f73696d706c6564657369676e5f6261726368617274332e706e67" alt=""></li>
<li>BarChart (grouped DataSets)<br><img src="https://camo.githubusercontent.com/4bf136c2fd25bcbeac0bcf363bc8f48dae0651fc/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d5043686172742f6d61737465722f73637265656e73686f74732f67726f7570656462617263686172742e706e67" alt=""></li>
<li>Horizontal-BarChart<br><img src="https://camo.githubusercontent.com/2ec281e0ac3013076bff1c3ac00d8d6de372d7a4/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d5043686172742f6d61737465722f73637265656e73686f74732f686f72697a6f6e74616c5f62617263686172742e706e67" alt=""></li>
<li>PieChart (with selection, …)<br><img src="https://camo.githubusercontent.com/7e8a4a3c938c21d032d44d999edd781b6e146f2a/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d50416e64726f696443686172742f6d61737465722f73637265656e73686f74732f73696d706c6564657369676e5f7069656368617274312e706e67" alt=""></li>
<li>ScatterChart (with squares, triangles, circles, … and more)<br><img src="https://camo.githubusercontent.com/6b254aa699df7f9464967009129c3017de721b77/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d50416e64726f696443686172742f6d61737465722f73637265656e73686f74732f7363617474657263686172742e706e67" alt=""></li>
<li>CandleStickChart (for financial data)<br><img src="https://camo.githubusercontent.com/6dbee4e35fde8691e5ac29417583dc8e16608895/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d50416e64726f696443686172742f6d61737465722f73637265656e73686f74732f63616e646c65737469636b63686172742e706e67" alt=""></li>
<li>BubbleChart (area covered by bubbles indicates the yValue)<br><img src="https://camo.githubusercontent.com/6704c21e680e831c3c07d0bebf2676f5e99a3d41/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d50416e64726f696443686172742f6d61737465722f73637265656e73686f74732f627562626c6563686172742e706e67" alt=""></li>
<li>RadarChart (spider web chart)<br><img src="https://camo.githubusercontent.com/782ded242133f98db56004fc94401570b8749620/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d50416e64726f696443686172742f6d61737465722f73637265656e73686f74732f726164617263686172742e706e67" alt=""></li>
</ol>
<p>以上图片来自MPAndroidChart的GitHub主页</p>
<h2 id="MPAndroidChart基本用法"><a href="#MPAndroidChart基本用法" class="headerlink" title="MPAndroidChart基本用法"></a>MPAndroidChart基本用法</h2><h3 id="1-把MPAndroidChart添加到你的AndroidStudio项目里面："><a href="#1-把MPAndroidChart添加到你的AndroidStudio项目里面：" class="headerlink" title="1. 把MPAndroidChart添加到你的AndroidStudio项目里面："></a>1. 把MPAndroidChart添加到你的AndroidStudio项目里面：</h3><pre><code>dependencies {
    compile &apos;com.github.PhilJay:MPAndroidChart:v3.0.0-beta1&apos;
}
</code></pre><p>这样就添加了项目依赖，如果你需要定制MPAndroidChart的部分功能，也可以通过git clone <a href="https://github.com/PhilJay/MPAndroidChart.git" target="_blank" rel="external">https://github.com/PhilJay/MPAndroidChart.git</a> 获取工程源码，作为library添加到项目里面，当然如何操作取决于我们每个人的需求。</p>
<h3 id="2-简单的上手操作"><a href="#2-简单的上手操作" class="headerlink" title="2. 简单的上手操作"></a>2. 简单的上手操作</h3><p>　　1.首先新建一个名为linechart.xml的布局文件</p>
<pre><code>&lt;com.github.mikephil.charting.charts.LineChart
        android:id=&quot;@+id/line_chart&quot;
        android:layout_width=&quot;match_parent&quot;
        android:layout_height=&quot;200dp&quot; /&gt;
</code></pre><p>　　2.新建一个结构体AccuracyInfo</p>
<pre><code>public class AccuracyInfo implements Parcelable{
    public String lessonName;//必选    String    课程名称
    public float accuracy;//必选    float    当前课时所有作业环节的平均正确率

    public AccuracyInfo( String lessonName, float accuracy) {
    this.lessonName = lessonName;
    this.accuracy = accuracy;
}


public String getLessonName() {
    return lessonName;
}

public void setLessonName(String lessonName) {
    this.lessonName = lessonName;
}

public float getAccuracy() {
    return accuracy;
}

public void setAccuracy(float accuracy) {
    this.accuracy = accuracy;
}


protected AccuracyInfo(Parcel in) {

    lessonName = in.readString();
    accuracy = in.readFloat();
}

@Override
public void writeToParcel(Parcel dest, int flags) {
    dest.writeString(lessonName);
    dest.writeFloat(accuracy);
}

@Override
public int describeContents() {
    return 0;
}

public static final Creator&lt;AccuracyInfo&gt; CREATOR = new Creator&lt;AccuracyInfo&gt;() {
    @Override
    public AccuracyInfo createFromParcel(Parcel in) {
        return new AccuracyInfo(in);
    }

    @Override
    public AccuracyInfo[] newArray(int size) {
        return new AccuracyInfo[size];
    }
};
}
</code></pre><p>　　3.然后进行具体的代码</p>
<pre><code>public class PersonalCenterLearningSituationFragment extends BaseFragment implements     OnChartValueSelectedListener,View.OnClickListener{

    private String TAG = PersonalCenterLearningSituationFragment.class.getSimpleName();
    private PersonalCenterActivity mActivity;
    private LineChart lineChart;
    private Typeface typeface;
    private ArrayAdapter&lt;String&gt; adapter;
    private List&lt;AccuracyInfo&gt; accuracyInfoList;//此时的数据自行填充


    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        mActivity = (PersonalCenterActivity)getActivity();
        mHandler=new MyHandler&lt;&gt;(this);
    }

    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle     savedInstanceState) {
        View view = inflater.inflate(R.layout.linechart, null, true);
        initView(view);
        return view;
    }


    /**
     * 初始化View
     * @param view
     */
private void initView(View view){
    initLineChartView(view);
    setLineChartData(accuracyInfoList);
}

    /**
     * 初始化LineChart表视图
     * @param view
     */
private void initLineChartView(View view){
    lineChart=(LineChart)view.findViewById(R.id.line_chart);
    lineChart.setDescription(&quot;xxxxxx&quot;);//表格的描述信息
    lineChart.setNoDataText(&quot;xxxxxx&quot;);//没有数据表格的描述信息
    lineChart.setTouchEnabled(true);
    lineChart.setDragDecelerationFrictionCoef(0.9f);
    lineChart.setDragEnabled(true);
    lineChart.setScaleEnabled(true);
    lineChart.setDrawGridBackground(false);
    lineChart.setHighlightPerDragEnabled(true);
    lineChart.setExtraBottomOffset(30f);//偏移量
    lineChart.setExtraLeftOffset(5f);
    lineChart.setPinchZoom(true);
    lineChart.setOnChartValueSelectedListener(this);
    lineChart.getAxisLeft().setLabelCount(10, false);//设置y轴显示标签的数量

    // add data
    lineChart.animateX(2500);
    typeface = Typeface.createFromAsset(getActivity().getAssets(), &quot;OpenSans-Regular.ttf&quot;);

   //折线图的标签设置
    Legend l = lineChart.getLegend();
    l.setEnabled(false);//不显示标签
    l.setForm(Legend.LegendForm.LINE);
    l.setTypeface(typeface);
    l.setTextSize(11f);
    l.setTextColor(Color.BLACK);
    l.setPosition(Legend.LegendPosition.BELOW_CHART_CENTER);

    //X轴的设置
    XAxis xAxis = lineChart.getXAxis();
    xAxis.setPosition(XAxis.XAxisPosition.BOTTOM);//x轴lable的位置
    xAxis.setTypeface(typeface);
    xAxis.setEnabled(true);
    xAxis.setTextColor(ColorTemplate.getHoloBlue());
    xAxis.setDrawGridLines(false);
    xAxis.setDrawLabels(true);//默认隐藏x轴的值
    xAxis.setDrawAxisLine(true);
    xAxis.setSpaceBetweenLabels(1);
    xAxis.setAvoidFirstLastClipping(true);//如果设置为true，图表将避免第一个和最后一个标签条目被减掉在图表或屏幕的边缘。
    xAxis.setSpaceBetweenLabels(1);//设置x轴标签之间的空间字符数，默认是4个。
    //左侧Y轴设置
    YAxis leftAxis = lineChart.getAxisLeft();
    leftAxis.setTypeface(typeface);
    leftAxis.setEnabled(true);
    leftAxis.setDrawLabels(true);
    leftAxis.setTextColor(ColorTemplate.getHoloBlue());
    leftAxis.setAxisMaxValue(100);
    leftAxis.setAxisMinValue(0);
    leftAxis.setDrawGridLines(true);
    leftAxis.setDrawAxisLine(true);
    leftAxis.setGranularityEnabled(true);
    leftAxis.setValueFormatter(new PercentFormatter());//设置百分比显示
    //右侧Y轴设置
    YAxis rightAxis = lineChart.getAxisRight();
    rightAxis.setTypeface(typeface);
    rightAxis.setEnabled(false);
    rightAxis.setDrawLabels(false);
    rightAxis.setTextColor(Color.RED);
    rightAxis.setAxisMaxValue(100);
    rightAxis.setAxisMinValue(0);
    rightAxis.setDrawGridLines(false);
    rightAxis.setDrawZeroLine(false);
    rightAxis.setGranularityEnabled(false);
    rightAxis.setDrawAxisLine(false);
    }

    /**
     * 设置LineChart表所有数据
     */
private void setLineChartData(List&lt;AccuracyInfo&gt; accuracyInfoList) {
    Logg.d(TAG,&quot;position--&quot;+position+&quot;accuracyInfoList--&quot;+accuracyInfoList.size());
    ArrayList&lt;String&gt; xVals = new ArrayList&lt;String&gt;();// X轴数据
    ArrayList&lt;Entry&gt; yVals = new ArrayList&lt;Entry&gt;();//  Y轴数据
    if(accuracyInfoList!=null){
        for (int i = 0; i &lt; accuracyInfoList.size(); i++) {
            xVals.add(accuracyInfoList.get(i).getLessonName());
        }
        for (int i = 0; i &lt; accuracyInfoList.size(); i++) {
            float val = (accuracyInfoList.get(i).getAccuracy());
            yVals.add(new Entry(val, i));
        }
    }
        LineDataSet lineDataSet;
        lineDataSet = new LineDataSet(yVals,&quot;MPAndroid折线图&quot;);//对应折线图的名称
        lineDataSet.setAxisDependency(YAxis.AxisDependency.RIGHT);
        lineDataSet.setColor(Color.parseColor(&quot;#999999&quot;));//对应折线图的颜色
        lineDataSet.setCircleColor(Color.parseColor(&quot;#999999&quot;));//对应折线图节点的圆点颜色
        lineDataSet.setLineWidth(2f);
        lineDataSet.setValueFormatter(new PercentFormatter());//设置百分比显示
        lineDataSet.setCircleRadius(3f);
        lineDataSet.setFillAlpha(65);
        lineDataSet.setFillColor(Color.RED);
        lineDataSet.setDrawCircleHole(false);
        lineDataSet.setHighLightColor(Color.rgb(244, 117, 117));
        ArrayList&lt;ILineDataSet&gt; dataSets = new ArrayList&lt;ILineDataSet&gt;();
        dataSets.add(lineDataSet);
        LineData data = new LineData(xVals, dataSets);
        data.setValueTextColor(Color.BLACK);//折线图圆点文本值的颜色
        data.setValueTextSize(9f);
        lineChart.setData(data);
        lineChart.invalidate();//表格重绘

    }


@Override
public void onDestroy() {
    super.onDestroy();
    }


@Override
public void onValueSelected(Entry e, int dataSetIndex, Highlight h) {
    //获取对应折线圆点的对应值：e.getVal()) 获取对应x轴的值：e.getXIndex())
    }

@Override
public void onNothingSelected() {

    }
}
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[我的第一篇博客竟然不知道取什么名字]]></title>
      <url>https://chenzhenpeng.github.io/2016/07/06/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E7%AB%9F%E7%84%B6%E4%B8%8D%E7%9F%A5%E9%81%93%E5%8F%96%E4%BB%80%E4%B9%88%E5%90%8D%E5%AD%97/</url>
      <content type="html"><![CDATA[<h2 id="终于我也开始折腾Github-Pages与Hexo的博客"><a href="#终于我也开始折腾Github-Pages与Hexo的博客" class="headerlink" title="终于我也开始折腾Github Pages与Hexo的博客"></a>终于我也开始折腾Github Pages与Hexo的博客</h2><p>　　今天上班的时候，一位友人告诉我他开始折腾博客了，看了他的博客站点感觉挺不错的。其实之前也看过相关的教程，最后由于域名的原因，放弃了，今天一时兴起，于是花了几分钟在阿里云注册了一个域名。于是漫漫折腾之路开始了，大概折腾了将近1个小时，还没成功，其实大部分步骤已经搞定了。<a id="more"></a>最后在另一位友人的指导下，终于在下班之前完成了博客的搭建工作，在此感谢两位友人。</p>
]]></content>
    </entry>
    
  
  
</search>
